--- /home/jc/Projects/Devel/Sandbox/numeric/minmaxavg.asm
+++ /home/jc/Projects/Devel/Sandbox/numeric/mma.diff
@@ -125,48 +125,123 @@
 std::tuple<double, double, double> minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&):
         push    rbp
         mov     rbp, rsp
+        sub     rsp, 80
+        mov     QWORD PTR [rbp-72], rdi
+        mov     QWORD PTR [rbp-80], rsi
+        movsd   xmm0, QWORD PTR .LC6[rip]
+        movsd   QWORD PTR [rbp-56], xmm0
+        movsd   xmm0, QWORD PTR .LC7[rip]
+        movsd   QWORD PTR [rbp-64], xmm0
+        pxor    xmm0, xmm0
+        movsd   QWORD PTR [rbp-8], xmm0
+        mov     rax, QWORD PTR [rbp-80]
+        mov     QWORD PTR [rbp-48], rax
+        lea     rax, [rbp-56]
+        mov     QWORD PTR [rbp-40], rax
+        lea     rax, [rbp-64]
+        mov     QWORD PTR [rbp-32], rax
+        movsd   xmm0, QWORD PTR [rbp-8]
+        movsd   QWORD PTR [rbp-24], xmm0
+        lea     rax, [rbp-48]
+        mov     r8d, 0
+        mov     ecx, 3
+        mov     edx, 0
+        mov     rsi, rax
+        mov     edi, OFFSET FLAT:std::tuple<double, double, double> minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&) [clone ._omp_fn.0]
+        call    GOMP_parallel_sections
+        movsd   xmm0, QWORD PTR [rbp-24]
+        movsd   QWORD PTR [rbp-8], xmm0
+        movsd   xmm0, QWORD PTR [rbp-8]
+        movsd   xmm1, QWORD PTR .LC8[rip]
+        divsd   xmm0, xmm1
+        movsd   QWORD PTR [rbp-16], xmm0
+        mov     rax, QWORD PTR [rbp-72]
+        lea     rcx, [rbp-16]
+        lea     rdx, [rbp-64]
+        lea     rsi, [rbp-56]
+        mov     rdi, rax
+        call    std::tuple<std::__strip_reference_wrapper<std::decay<double&>::type>::__type, std::__strip_reference_wrapper<std::decay<double&>::type>::__type, std::__strip_reference_wrapper<std::decay<double>::type>::__type> std::make_tuple<double&, double&, double>(double&, double&, double&&)
+        mov     rax, QWORD PTR [rbp-72]
+        leave
+        ret
+auto minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1}::operator()<double>(double) const:
+        push    rbp
+        mov     rbp, rsp
+        mov     QWORD PTR [rbp-8], rdi
+        movsd   QWORD PTR [rbp-16], xmm0
+        mov     rax, QWORD PTR [rbp-8]
+        mov     rax, QWORD PTR [rax]
+        movsd   xmm0, QWORD PTR [rax]
+        comisd  xmm0, QWORD PTR [rbp-16]
+        ja      .L82
+        jmp     .L83
+.L82:
+        mov     rax, QWORD PTR [rbp-8]
+        mov     rax, QWORD PTR [rax]
+        movsd   xmm0, QWORD PTR [rbp-16]
+        movsd   QWORD PTR [rax], xmm0
+.L83:
+        nop
+        pop     rbp
+        ret
+auto minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2}::operator()<double>(double) const:
+        push    rbp
+        mov     rbp, rsp
+        mov     QWORD PTR [rbp-8], rdi
+        movsd   QWORD PTR [rbp-16], xmm0
+        mov     rax, QWORD PTR [rbp-8]
+        mov     rax, QWORD PTR [rax]
+        movsd   xmm1, QWORD PTR [rax]
+        movsd   xmm0, QWORD PTR [rbp-16]
+        comisd  xmm0, xmm1
+        ja      .L91
+        jmp     .L92
+.L91:
+        mov     rax, QWORD PTR [rbp-8]
+        mov     rax, QWORD PTR [rax]
+        movsd   xmm0, QWORD PTR [rbp-16]
+        movsd   QWORD PTR [rax], xmm0
+.L92:
+        nop
+        pop     rbp
+        ret
+std::tuple<double, double, double> minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&) [clone ._omp_fn.0]:
+        push    rbp
+        mov     rbp, rsp
         push    r12
         push    rbx
-        sub     rsp, 48
-        mov     QWORD PTR [rbp-56], rdi
-        mov     QWORD PTR [rbp-64], rsi
-        movsd   xmm0, QWORD PTR .LC6[rip]
-        movsd   QWORD PTR [rbp-40], xmm0
-        movsd   xmm0, QWORD PTR .LC7[rip]
-        movsd   QWORD PTR [rbp-48], xmm0
-        pxor    xmm0, xmm0
-        movsd   QWORD PTR [rbp-24], xmm0
-        lea     rax, [rbp-40]
-        mov     r12, rax
-        mov     rax, QWORD PTR [rbp-64]
+        sub     rsp, 16
+        mov     QWORD PTR [rbp-24], rdi
+        call    GOMP_sections_next
+.L177:
+        cmp     eax, 3
+        je      .L172
+        cmp     eax, 3
+        ja      .L173
+        cmp     eax, 2
+        je      .L174
+        cmp     eax, 2
+        ja      .L173
+        test    eax, eax
+        je      .L175
+        cmp     eax, 1
+        je      .L176
+.L173:
+        ud2
+.L175:
+        call    GOMP_sections_end_nowait
+        jmp     .L179
+.L178:
+        call    GOMP_sections_next
+        jmp     .L177
+.L172:
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax]
         mov     rdi, rax
         call    std::array<double, 100000ul>::end() const
         mov     rbx, rax
-        mov     rax, QWORD PTR [rbp-64]
-        mov     rdi, rax
-        call    std::array<double, 100000ul>::begin() const
-        mov     rdx, r12
-        mov     rsi, rbx
-        mov     rdi, rax
-        call    minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1} std::for_each<double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1}>(double const*, double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1})
-        lea     rax, [rbp-48]
-        mov     r12, rax
-        mov     rax, QWORD PTR [rbp-64]
-        mov     rdi, rax
-        call    std::array<double, 100000ul>::end() const
-        mov     rbx, rax
-        mov     rax, QWORD PTR [rbp-64]
-        mov     rdi, rax
-        call    std::array<double, 100000ul>::begin() const
-        mov     rdx, r12
-        mov     rsi, rbx
-        mov     rdi, rax
-        call    minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2} std::for_each<double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2}>(double const*, double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2})
-        mov     rax, QWORD PTR [rbp-64]
-        mov     rdi, rax
-        call    std::array<double, 100000ul>::end() const
-        mov     rbx, rax
-        mov     rax, QWORD PTR [rbp-64]
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax]
         mov     rdi, rax
         call    std::array<double, 100000ul>::begin() const
         mov     rdx, rax
@@ -176,62 +251,49 @@
         mov     rdi, rdx
         call    double std::accumulate<double const*, double>(double const*, double const*, double)
         movq    rax, xmm0
-        mov     QWORD PTR [rbp-24], rax
-        movsd   xmm0, QWORD PTR [rbp-24]
-        movsd   xmm1, QWORD PTR .LC8[rip]
-        divsd   xmm0, xmm1
-        movsd   QWORD PTR [rbp-32], xmm0
-        mov     rax, QWORD PTR [rbp-56]
-        lea     rcx, [rbp-32]
-        lea     rdx, [rbp-48]
-        lea     rsi, [rbp-40]
-        mov     rdi, rax
-        call    std::tuple<std::__strip_reference_wrapper<std::decay<double&>::type>::__type, std::__strip_reference_wrapper<std::decay<double&>::type>::__type, std::__strip_reference_wrapper<std::decay<double>::type>::__type> std::make_tuple<double&, double&, double>(double&, double&, double&&)
-        mov     rax, QWORD PTR [rbp-56]
-        add     rsp, 48
+        mov     rdx, QWORD PTR [rbp-24]
+        mov     QWORD PTR [rdx+24], rax
+        jmp     .L178
+.L174:
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax+16]
+        mov     r12, rax
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax]
+        mov     rdi, rax
+        call    std::array<double, 100000ul>::end() const
+        mov     rbx, rax
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax]
+        mov     rdi, rax
+        call    std::array<double, 100000ul>::begin() const
+        mov     rdx, r12
+        mov     rsi, rbx
+        mov     rdi, rax
+        call    minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2} std::for_each<double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2}>(double const*, double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2})
+        jmp     .L178
+.L176:
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax+8]
+        mov     r12, rax
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax]
+        mov     rdi, rax
+        call    std::array<double, 100000ul>::end() const
+        mov     rbx, rax
+        mov     rax, QWORD PTR [rbp-24]
+        mov     rax, QWORD PTR [rax]
+        mov     rdi, rax
+        call    std::array<double, 100000ul>::begin() const
+        mov     rdx, r12
+        mov     rsi, rbx
+        mov     rdi, rax
+        call    minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1} std::for_each<double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1}>(double const*, double const*, minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1})
+        jmp     .L178
+.L179:
+        add     rsp, 16
         pop     rbx
         pop     r12
-        pop     rbp
-        ret
-auto minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#1}::operator()<double>(double) const:
-        push    rbp
-        mov     rbp, rsp
-        mov     QWORD PTR [rbp-8], rdi
-        movsd   QWORD PTR [rbp-16], xmm0
-        mov     rax, QWORD PTR [rbp-8]
-        mov     rax, QWORD PTR [rax]
-        movsd   xmm0, QWORD PTR [rax]
-        comisd  xmm0, QWORD PTR [rbp-16]
-        ja      .L82
-        jmp     .L83
-.L82:
-        mov     rax, QWORD PTR [rbp-8]
-        mov     rax, QWORD PTR [rax]
-        movsd   xmm0, QWORD PTR [rbp-16]
-        movsd   QWORD PTR [rax], xmm0
-.L83:
-        nop
-        pop     rbp
-        ret
-auto minmaxavg<double, 100000ul>(std::array<double, 100000ul> const&)::{lambda(auto:1)#2}::operator()<double>(double) const:
-        push    rbp
-        mov     rbp, rsp
-        mov     QWORD PTR [rbp-8], rdi
-        movsd   QWORD PTR [rbp-16], xmm0
-        mov     rax, QWORD PTR [rbp-8]
-        mov     rax, QWORD PTR [rax]
-        movsd   xmm1, QWORD PTR [rax]
-        movsd   xmm0, QWORD PTR [rbp-16]
-        comisd  xmm0, xmm1
-        ja      .L91
-        jmp     .L92
-.L91:
-        mov     rax, QWORD PTR [rbp-8]
-        mov     rax, QWORD PTR [rax]
-        movsd   xmm0, QWORD PTR [rbp-16]
-        movsd   QWORD PTR [rax], xmm0
-.L92:
-        nop
         pop     rbp
         ret
 .LC2:

